{{- $global_data := .Values.global }}
{{- $tag_data := $global_data.tag_license }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.appName }}-deployment
  labels:
    app: {{ .Values.global.product }}
    tier: {{ .Values.appName }}
spec:
  {{- if $tag_data.autoscaling.enabled }}
  replicas: {{ $tag_data.autoscaling.minReplicas }}
  {{- else }}
  replicas: {{ .Values.scale.minReplicas }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ .Values.appName }}
{{- with $global_data.deploymentStrategy }}
  strategy:
{{ toYaml . | trim | indent 4 }}
{{- end }}
    {{- if eq $global_data.deploymentStrategy.type "RollingUpdate" }}
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    {{- end }}
  template:
    metadata:
      annotations:
        {{- include "tag-license.annotations" . | nindent 4 }}
      labels:
        app: {{ .Values.appName }}
    spec:
      {{- if not (eq $global_data.repotype "public") }}
      imagePullSecrets:
        - name: {{ $global_data.imagePullSecrets.name }}
      {{- end }}
      securityContext:
        {{- toYaml $tag_data.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Values.appName }}
          securityContext: {{- toYaml $tag_data.securityContext | nindent 12 }}
          image: {{ include "tag-license.imageUrl" . | quote }}
          resources:
            {{ .Values.global.tag_license.resources | toYaml | indent 12 | trim }}
          imagePullPolicy: {{ .Values.global.imagePullPolicy | default "IfNotPresent" }}
          ports:
          - containerPort: {{ .Values.appPort }}
          env:
            - name: PORT
              value: "{{ .Values.appPort }}"
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: {{ .Values.appPort }}
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: {{ .Values.appPort }}
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          volumeMounts:
      {{- if eq .Values.global.tag_license.storage.efs.enabled true}}
            - name: {{ .Values.appName }}-efs-license
              mountPath: /app/license
      {{- end }}
      {{- if .Values.global.tag_license.storage.local.enabled}}
      {{- if .Values.global.tag_license.storage.local.persistantVolumeClaimCreate }}
          volumeMounts:
            - name: {{ .Values.appName }}-license
              mountPath: /app/license
              subPath: ""
              readOnly: false
        {{- if .Values.global.tag_license.storage.local.create_license_from_Secret }}
            - name: {{ .Values.appName }}-license-secret
              mountPath: /app/license/license.key
              subPath: license.key
              readOnly: false
        {{- end }}
      {{- end }}
      {{- end }}
      volumes:
      {{- if eq .Values.global.tag_license.storage.efs.enabled true}}
        - name: {{ .Values.appName }}-efs-license
          persistentVolumeClaim:
          nfs:
            server: {{ .Values.global.tag_license.storage.efs.dnsName }}
            path: /
      {{- end }}
      {{- if .Values.global.tag_license.storage.local.enabled}}
      {{- if .Values.global.tag_license.storage.local.persistantVolumeClaimCreate }}
        - name: {{ .Values.appName }}-license
          persistentVolumeClaim:
            claimName: {{ .Values.global.tag_license.storage.local.persistantVolumeClaimName }}
            readOnly: false
        {{- if .Values.global.tag_license.storage.local.create_license_from_Secret }}
        - name: {{ .Values.appName }}-license-secret
          secret:
            secretName: {{ .Values.global.tag_license.licenseSecretName | default "tag-license" }}
        {{- end }}
      {{- end }}
      {{- end }}
